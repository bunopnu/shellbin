use super::Assembler;

/// Represents the following assembly code:
///
/// ```assembly
/// format ELF64 executable 3
///
/// segment readable executable
/// entry main
/// main:
///     lea  rdi, [cmd]
///     mov  rax, 0x3b
///     lea  rsi, [argv]
///     xor  rdx, rdx
///     syscall
///
///     xor  rdi, rdi
///     mov  rax, 60
///     syscall
/// ```
const EXECUTABLE: [u8; 257] = [
    0x7F, 0x45, 0x4C, 0x46, 0x02, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x3E, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38, 0x00, 0x02, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xD6, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x2C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x8D, 0x3D, 0x3F, 0x10, 0x00, 0x00, 0x48, 0xC7, 0xC0, 0x3B, 0x00, 0x00, 0x00, 0x48, 0x8D,
    0x35, 0x11, 0x10, 0x00, 0x00, 0x48, 0x31, 0xD2, 0x0F, 0x05, 0x48, 0x31, 0xFF, 0x48, 0xC7, 0xC0,
    0x3C, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xF6, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x10,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x69, 0x6E, 0x2F, 0x73, 0x68, 0x00, 0x2D, 0x63,
    0x00,
];

/// A struct representing a Linux-specific assembler.
pub struct LinuxAssembler;

impl Assembler for LinuxAssembler {
    fn assemble(source: String) -> crate::result::Result<Vec<u8>> {
        let length = source.len();

        if length > super::PREFFERED_MAXIMUM {
            return Err(crate::result::Error::TooLong);
        }

        let data = source.as_bytes().to_vec();

        let mut binary = EXECUTABLE.to_vec();
        binary.extend(data);
        binary.push(0);

        Ok(binary)
    }
}
