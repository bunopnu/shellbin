use crate::assembler::Assembler;

/// Represents the following assembly code:
///
/// ```assembly
/// format ELF executable 3
///
/// segment readable executable
/// entry main
/// main:
///     lea ebx, [cmd]
///     mov eax, 11
///     lea ecx, [argv]
///     xor edx, edx
///     int 0x80
///
///     xor ebx, ebx
///     mov eax, 1
///     int 0x80
/// ```
const EXECUTABLE: [u8; 173] = [
    0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x80, 0x04, 0x08, 0x34, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x20, 0x00, 0x02, 0x00, 0x28, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x08,
    0x00, 0x80, 0x04, 0x08, 0x92, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x92, 0x90, 0x04, 0x08,
    0x92, 0x90, 0x04, 0x08, 0x1C, 0x20, 0x00, 0x00, 0x1C, 0x20, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x8D, 0x1D, 0xA2, 0x90, 0x04, 0x08, 0xB8, 0x0B, 0x00, 0x00, 0x00, 0x8D,
    0x0D, 0x92, 0x90, 0x04, 0x08, 0x31, 0xD2, 0xCD, 0x80, 0x31, 0xDB, 0xB8, 0x01, 0x00, 0x00, 0x00,
    0xCD, 0x80, 0xA2, 0x90, 0x04, 0x08, 0xAA, 0x90, 0x04, 0x08, 0xAD, 0x90, 0x04, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x2F, 0x62, 0x69, 0x6E, 0x2F, 0x73, 0x68, 0x00, 0x2D, 0x63, 0x00,
];

/// A struct representing a Linux-specific (i386) assembler.
pub struct LinuxAssembler;

impl Assembler for LinuxAssembler {
    fn assemble(source: String) -> crate::result::Result<Vec<u8>> {
        let mut binary = Vec::with_capacity(EXECUTABLE.len() + source.len() + 1);

        binary.extend_from_slice(&EXECUTABLE);
        binary.extend(source.bytes());
        binary.push(0);

        Ok(binary)
    }
}
